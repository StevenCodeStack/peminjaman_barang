generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

enum BorrowRequestStatus {
  PENDING
  APPROVED
  REJECTED
}

enum BorrowReturnStatus {
  GOOD
  DAMAGED
  LOST
}

enum AdminType {
  ADMIN
  SUPERADMIN
}

enum Role {
  STUDENT
  ADMIN
  SUPERADMIN
}

model Admin {
  id String @id @default(cuid())
  type AdminType
  user User @relation(fields:[userId], references: [id])
  userId String @unique

  @@index([userId])
}

model Student {
  id String @id @default(cuid())
  nik String @unique @db.VarChar(4)
  class String @db.VarChar(30)
  major String @db.VarChar(50)
  user User @relation(fields:[userId], references: [id])
  userId String @unique
  
  @@index([userId])
}


model User {
  id String @id @default(cuid())
  username String? @db.VarChar(50)
  fullName String? @db.VarChar(100)
  email String @db.VarChar(255)
  picture String @db.VarChar(255)
  role Role
  student Student?
  admin Admin?
  warning Int @default(0)

  borrowRequest BorrowRequest[]
  borrow Borrow[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  deletedAt DateTime?
}

model Item {
  id String @id @default(cuid())
  name String @db.VarChar(150)
  type String @db.VarChar(150)
  category String @db.VarChar(150)
  isAvailable Boolean @default(false)
  picture String @db.VarChar(255)

  borrowRequest BorrowRequest[]
  borrow Borrow[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model BorrowRequest {
  id String @id @default(cuid())
  status BorrowRequestStatus @default(PENDING)
  adminNote String?
  student User @relation(fields:[studentId], references: [id])
  studentId String 
  item Item @relation(fields:[itemId], references: [id])
  itemId String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  @@index([studentId])
  @@index([itemId])
  @@index([status, createdAt])
}

model Borrow {
  id String @id @default(cuid())
  active Boolean @default(true)
  borrowCode String @db.VarChar(6) @unique
  student User @relation(fields: [studentId], references: [id])
  studentId String
  item Item @relation(fields: [itemId], references: [id])
  itemId String @unique
  dueDate DateTime
  returnDate DateTime?

  borrowReturn BorrowReturn?

  createdAt DateTime @default(now())
  deletedAt DateTime?

  @@index([studentId]) 
  @@index([itemId])
  @@index([dueDate])
}

model BorrowReturn {
  id String @id @default(cuid())
  status BorrowReturnStatus
  note String

  borrow Borrow @relation(fields: [borrowId], references: [id])
  borrowId String @unique

  returnAt DateTime @default(now())

  @@index([borrowId])
}